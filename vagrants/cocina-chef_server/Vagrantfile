Vagrant::Config.run do |config|
  # ===========================================================================
  #
  # Node Identity
  #
  # You shouldn't need to mess with anything but this section

  # cloud we're targeting
  organization     = 'cocina'
  cluster          = 'cocina'
  facet            = 'chef_server'
  facet_index      = '1'
  node_name        = "#{cluster}-#{facet}-#{facet_index}"
  host_network_ip  = "33.33.33.10"
  chef_server_url  = "http://localhost:4000"
  chef_environment = "dev"
  os_version       = "oneiric"
  ram_mb           = 640
  #
  homebase_on_host_dir = File.expand_path("../..", File.dirname(__FILE__))

  # ===========================================================================
  #
  # Configure VM
  #

  # Home for credentials and machine-specific setup
  credentials_dir = File.expand_path("knife/#{organization}-credentials", homebase_on_host_dir)
  # Location that cookbooks, roles, etc will be mounted on vm
  homebase_on_vm_dir = "/cloud"

  # box to build off of.
  config.vm.box = "cluster-chef-#{os_version}"

  # Boot with a GUI so you can see the screen. (Default is headless)
  config.vm.boot_mode = :gui

  # Host only network IP lets you access it via the IP.
  # config.vm.network  host_network_ip # vagrant 0.8
  config.vm.network  :hostonly, host_network_ip

  # Assign this VM to a bridged network, allowing you to connect directly to a
  # network using the host's network device. This makes the VM appear as another
  # physical device on your network.
  # config.vm.network :bridged

  # Forward a port from the guest to the host, which allows for outside
  # computers to access the VM, whereas host only networking does not.
  # config.vm.forward_port 80, 8080

  # Mount this to see all our chefs and stuff: [type, vm_path, host_path]
  config.vm.share_folder "homebase",  homebase_on_vm_dir, homebase_on_host_dir
  config.vm.share_folder "etc-chef",  '/etc/chef',        File.join(credentials_dir, "chef_server")

  # config.vm.customize do |vm|
  #   vm.name        = node_name
  #   vm.memory_size = 640
  #   # Use the host resolver for DNS so that VPN continues to work within the VM
  #   vm.network_adapters.each do |na|
  #     na.nat_driver.dns_use_host_resolver = true if na.enabled? && na.nat_driver
  #   end
  # end

  #
  # See http://www.virtualbox.org/manual/ch08.html#idp12418752
  # for the craziness
  #
  config.vm.customize [
    "modifyvm", :id,
    "--name",    node_name.to_s,
    "--memory",  ram_mb.to_s,
    # Use the host resolver for DNS so that VPN continues to work within the VM
    "--natdnshostresolver1", "on",
  ]

  # ===========================================================================
  #
  # Provision with chef
  #

  chef_mode = :chef_solo

  # Enable provisioning with chef solo, specifying a cookbooks path (relative
  # to this Vagrantfile), and adding some recipes and/or roles.
  #
  config.vm.provision chef_mode do |chef|
    #
    chef.node_name         = node_name
    #
    case chef_mode
    when :chef_client
      chef.chef_server_url   = chef_server_url
      chef.validation_client_name = "#{cluster}-validator"
      chef.validation_key_path = File.join(credentials_dir, "#{cluster}-validator.pem")
      # chef.client_key_path     = File.join(credentials_dir, "client_keys", "client-#{node_name}.pem")
      chef.environment         = chef_environment
    when :chef_solo
      chef.provisioning_path = '/etc/chef'
      chef.cookbooks_path    = [:vm, homebase_on_vm_dir]
      chef.roles_path        = [:vm, homebase_on_vm_dir]
      chef.data_bags_path    = [:vm, homebase_on_vm_dir]
    else raise "please define chef_mode as :chef_solo or :chef_client (got '#{chef_mode}'"
    end
    #
    chef.add_role       :base_role
    chef.add_role       :chef_client
    chef.add_role       :ssh
    #
    chef.add_recipe     'cloud_utils::virtualbox_metadata'
    chef.add_recipe     'chef-server::rubygems-install'
    #
    case chef_mode
    when :chef_client
      # chef.add_role   :nfs_client
      chef.add_recipe   :package_set
    when :chef_solo
      chef.add_recipe   'chef-client::config'
      chef.add_recipe   'chef-client::service'
    end
    #
    chef.json = {
      "cluster_name"    => cluster,
      "facet_name"      => facet,
      "facet_index"     => facet_index,
      #
      "chef_client" => {
        "init_style"             => "runit",
        "server_url"             => chef_server_url,
        "validation_client_name" => "#{cluster}-validator",
      },
      "chef_server" => {
        "server_url"             => chef_server_url,
        "init_style"             => "runit",
        "webui_enabled"          => true,
        "validation_client_name" => "#{cluster}-validator",
        "validation_client_file" => "/etc/chef/#{cluster}-validator.pem",
        "solr_heap_size"         => "128M"
      },
      #
      "nfs" => { "mounts" => [
          ["/home/#{ENV['USER']}", { "owner" => ENV['USER'], "remote_path" => ENV['HOME'] } ],
        ] },
      "package_set" => {
        "install"       => [ "base", "dev", "sysadmin", "text", "vagrant", "cluster_chef", "xml" ],
        "gems"          => { "cluster_chef" => %w[ cluster_chef ] }
      },
      "tuning"          => { "swappiness" => "60", "overcommit_memory" => "1", "overcommit_ratio" => "100" },
      "java"            => { "install_flavor" =>"sun" },
      "volumes" => {
        "root"          => { "tags" => { "scratch" => true }, "mount_point" => "/", "device" => "/dev/mapper/cluster--chef--natty-root", "mountable" => false }
      }
    }
  end

end
